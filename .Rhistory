precio = 100
precio -> 100
precio <- 100
precio = 100
if(precio < 100){
print("Es menor a 100")
}else{
print("Es mayor a 100")
}
precio = 100
if(precio < 100){
print("Es menor a 100")
}else{
print("Es mayor a 100")
}
quantity <- c(1,1,2,1,2)
quantity <- c(1,1,2,1,2)
precio = 100
if(precio < 100){
print("Es menor a 100")
}else{
print("Es mayor a 100")
}
quantity <- c(1,1,2,1,2)
quantity
quantity
quantity <- c(1,1,2,1,2)
ifelse(quantity == 1, 'Yes','No')
price <- c(58,100,110)
if(price < 100){
print("Es menor a 100")
}else if(price == 100){
print("Es igual a 100")
}else{
print("Es mayor a 100")
}
price <- c(58,100,110)
ifelse(price < 100){
price <- c(58,100,110)
if(all(proce<100)){
print("Todos son <100")
}
price <- c(58,100,110)
if(all(price<100)){
print("Todos son <100")
}
if(any(price<100)){
print("Algun es <100")
}
days <- function(){
switch(x,
Mon = "Monday",
Tue = "Tuesday",
Wed = "Wednesday",
Thu = "Thursday",
Fri = "Friday",
"Weekend"
)
}
day("Mon")
days <- function(){
switch(x,
Mon = "Monday",
Tue = "Tuesday",
Wed = "Wednesday",
Thu = "Thursday",
Fri = "Friday",
"Weekend"
)
}
days("Mon")
days <- function(x){
switch(x,
Mon = "Monday",
Tue = "Tuesday",
Wed = "Wednesday",
Thu = "Thursday",
Fri = "Friday",
"Weekend"
)
}
days("Mon")
#Es un switch normal
days <- function(x){
switch(x,
Mon = "Monday",
Tue = "Tuesday",
Wed = "Wednesday",
Thu = "Thursday",
Fri = "Friday",
"Weekend"
)
}
days("Mon")
days(5)
#Es un switch normal
days <- function(x){
switch(x,
Mon = "Monday",
Tue = "Tuesday",
Wed = "Wednesday",
Thu = "Thursday",
Fri = "Friday",
"Weekend"
)
}
days("Mon")
#Sale friday por que esta en la posicion 5
days(10)
#Es un switch normal
days <- function(x){
switch(x,
Mon = "Monday",
Tue = "Tuesday",
Wed = "Wednesday",
Thu = "Thursday",
Fri = "Friday",
"Weekend"
)
}
days("Mon")
#Sale friday por que esta en la posicion 5
days(i)
#Es un switch normal
days <- function(x){
switch(x,
Mon = "Monday",
Tue = "Tuesday",
Wed = "Wednesday",
Thu = "Thursday",
Fri = "Friday",
"Weekend"
)
}
days("Mon")
#Sale friday por que esta en la posicion 5
days(6)
#mean es la media o sea el promedio, es una palabra reservada
#prod tambiÃ©n es una palabra reservada
quantity <- c(1,2,3,4,5)
avg_qty <- function(qty, type){
switch(type,
arithmetic = mean(quantity),
geometric = prod(quantity)^(1/length(quantity)))
}
avg_qty(quantity, "arithmetic")
#mean es la media o sea el promedio, es una palabra reservada
#prod tambiÃ©n es una palabra reservada
quantity <- c(1,2,3,4,5)
avg_qty <- function(qty, type){
switch(type,
arithmetic = mean(quantity),
geometric = prod(quantity)^(1/length(quantity)))
}
avg_qty(quantity, "geometric")
cart <- c("apple","cookie","lemon")
for(product in cart){
print(product)
}
price_discounted <- c(1)
price <- c(30,120,50,70,150,100,50,25,110)
for(i in 1:length(price)){
price_discounted[i] <- price[i] - price[i] * 0.1
print(price_discounted[i])
}
index <- 1
while(index < 3){
print(paste("Index is", index))
index <- index + 1
}
setwd("C:\\Users\\CC7\\Donwloads")
setwd("C:\\Users\\cc7\\Donwloads")
#Leer archivos
setwd("C:\\Users\\CC7\\Donwloads")
#Leer archivos
setwd("C:\\Users\\CC7\\Downloads")
maraton <- read.csv("maraton_ny.csv",
header = TRUE,#Nombre de las columnas
row.names = 1, #Las filas tienen un nombre
sep = ",",
dec = ".")
maraton
View(maraton)
class(maraton)
dim(maraton)
names(maraton)
str(maraton)
install.packages("dplyr")
rm(ls = list())
rm(list = ls())
iris
data()
Titanic
meses <- c('enero','febrero','marzo')
ventaS <- C(120,100,80)
objetivos <- c(TRUE,FALSE,TRUE)
datos <- data.frame(meses,ventas,objetivos)
print(datos)
objetivos <- c(TRUE,FALSE,TRUE)
datos <- data.frame(meses,ventas,objetivos)
ventaS <- C(120,100,80)
ventaS <- C(120,100,80)
ventaS <- C(120,100,80)
ventaS <- C(120,100,80)
ventaS <- C(120,100,80)
ventaS <- c(120,100,80)
datos <- data.frame(meses,ventas,objetivos)
meses <- c('enero','febrero','marzo')
rm(list = ls())
meses <- c('enero','febrero','marzo')
ventaS <- c(120,100,80)
objetivos <- c(TRUE,FALSE,TRUE)
datos <- data.frame(meses,ventas,objetivos)
rm(list = ls())
meses <- c('enero','febrero','marzo')
ventas <- c(120,100,80)
objetivos <- c(TRUE,FALSE,TRUE)
datos <- data.frame(meses,ventas,objetivos)
print(datos)
str(datos)
summary(datos)
AirPassengers
head(AirPassengers)
tail(AirPassengers)
datos[0]
datos[1]
datos[,1]
datos[1,'ventas']
datos[2,'objetivo']
datos[1,c('meses','objetivos')]
datos[,c('meses','objetivos')]
subset(datoa,subset = ventas <= 100)
subset(datoa,subset = ventas <= 100)
subset(datos,subset = ventas <= 100)
orden <- order(datos['ventas'])
datos[orden,]
orden.de <- order(-datos['ventas',])
orden.de <- order(-datos['ventas'])
datos[orden.de]
datos[1,'ventas']
datos$ventas
numeros <- 1:10
letras <- letters[1:10]
data <- data.frame(col1 = numeros, col2 = letras)
print(dta)
print(data)
data <- data.frame(col1 = numeros, col2 = letras)
print(data)
write.csv(
data,file = 'data.csv'
)
datos2 <- read.csv()
datos2 <- read.csv('data.csv')
print(datos2)
datos2$X <- null
datos2$X <- NULL
print(datos2)
datos1 <- data.frame(numeros,letras)
print(datos1)
datos2 <- data.frame(numeros = 11, letras = 'k')
PRINT(datos2)
print(datos2)
datos3 <- rbind(datos1,datos2)
print(datos3)
datos3 $ multiplicacion <- datos3$numeros*2
print(datos3)
colnames(datos3)
colnames(datos3) <- c('c1','c2','c3')
print(datos3)
colnames(datos3)[3] <- 'Nuevo'
print(datos3)
datos3[datos3$c1 > 6]
datos3[datos$c1 > 6]
datos3[datos3$c1 > 6]
datos3[datos3$c1>6,]
rm(list = ls())
personas <- c('Antonio','Maria','Juan')
edad <- c(40,30,35)
sexo <- c('M,'F','M')
sexo <- c('M','F','M')
infoPersonas <- data.frame(personas,edad,sexo)
print(infoPersonas)
meses <- c('enero','febrero','marzo')
ventas <- c(120,100,80)
objetivos <- c(TRUE,FALSE,TRUE)
datos <- data.frame(meses,ventas,objetivos)
subset(datos,subset = ventas <= 100)
factor(iris)
summary(factor(iris))
summary(factor(iris$Species))
summary(iris)
summary(sd(iris$Species = 'setosa'))
factor(sd(iris$Species = 'setosa'))
sd(iris$Species = 'setosa')
sd(iris$Sepal.Length)
sd(iris$Sepal.Length,iris$Species=''setosa)
sd(iris$Sepal.Length,iris$Species='setosa')
sd(iris$Sepal.Length,iris$Species='setosa')
sd(iris$Sepal.Length,iris$Species='setosa')
sd(iris$Sepal.Length,iris$Species='setosa')
sd(iris$Sepal.Length,iris$Species=='setosa')
sd(iris$Sepal.Length,iris$Species=='setosa')
sd(iris$Sepal.Length,iris$Species=='setosa')
sd(iris$Sepal.Length,iris$Species=='setosa')
sd(iris$Sepal.Length,na.rm = TRUE)
filtro <- (iris$Species=='setosa')
iris$Species[filtro]
iris$Sepal.Length[filtro]
sd(iris$Sepal.Length[filtro],na.rm = TRUE)
summary(factor(iris$Species))
summary(factor(iris))
summary(factor(iris$Species[filtro]))
sd(iris$Sepal.Length[filtro],na.rm = TRUE)
apply(iris,4,sd)
apply(iris,2,sd)
apply(iris$Species[filtro],2,sd)
apply(iris,2,sd)
sapply(iris[c('Sepal.length','Sepal.width','Petal.Lenght','Petal.width')],sd)
sapply(iris[c('Sepal.Length','Sepal.Width','Petal.Lenght','Petal.Width')],sd)
sapply(iris[c('Sepal.Length','Sepal.Width','Petal.Lenght','Petal.Width')], sd)
sd(iris$Petal.Width[filtro],na.rm = TRUE)filtro <- (iris$Species=='setosa')
sd(iris$Petal.Width[filtro],na.rm = TRUE)
sd(iris$Petal.Width,na.rm = TRUE)
iris$lat_sd <- ave(iris$Sepal.Length, iris$Sepal.Width,iris$Petal.Width, FUN=sd)
print(iris$lat_sd)
sd(iris$Petal.Width[filtro],na.rm = TRUE)
sd(iris$Petal.Width,na.rm = TRUE)
sd(iris$Petal.Width[filtro],na.rm = TRUE)
sd(iris$Petal.Width[filtro1],na.rm = TRUE)
sd(iris$Petal.Width[filtro2],na.rm = TRUE)
filtro1 <- (iris$Species=='versicolor')
filtro2 <- (iris$Species=='virginica')
filtro <- (iris$Species=='setosa')
sd(iris$Petal.Width[filtro],na.rm = TRUE)
sd(iris$Petal.Width[filtro1],na.rm = TRUE)
sd(iris$Petal.Width[filtro2],na.rm = TRUE)
install.packages("dplyr")
library("dplyr")
library("dplyr")
summary(maraton)
setwd("C:\\Users\\CC7\\Downloads")
maraton <- read.csv("maraton_ny.csv",
header = TRUE,#Nombre de las columnas
row.names = 1, #Las filas tienen un nombre
sep = ",",
dec = ".")
maraton <- read.csv("maraton_ny.csv",
header = TRUE,#Nombre de las columnas
row.names = 1, #Las filas tienen un nombre
sep = ",",
dec = ".")
View(maraton)
glimpse(maraton)
summary(maraton)
head(maraton)
install.packages("RWeka")
install.packages("RWeka")
library("RWeka")
library("RWeka")
datos <- read.arff("CEE_DATA.arff")
datos
