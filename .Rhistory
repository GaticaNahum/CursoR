plot(rivres)
#Es para ver en gráficas
plot(rivers)
boxplot(rivers)
boxplot(rivers,horizontal = TRUE)
#Debemos de saber el valores los bigotes antes de eliminar los atípicos
boxplots.stats(rivers)
#Debemos de saber el valores los bigotes antes de eliminar los atípicos
boxplot.stats(rivers)
$stats <- boxplot.stats(rivers)
$stats <- boxplot.stats(rivers)
stats <- boxplot.stats(rivers$stats)
stats <- boxplot.stats(rivers)
bigote1 <- stats[1]
bigote2 <-stats [5]
bigote1
bigote2
bigote1 <- stats$stats[1]
bigote2 <- stats$stats[5]
bigote1
bigote2
inferior <- stats$stats[1]
superior <- stats$stats[5]
rivers[rivers < superior & rivers > inferior]
boxplot(data)
data<-rivers[rivers < superior & rivers > inferior]
boxplot(data)
stats <- boxplot.stats(rivers)
stats
cantidad <- stats$out;
for(i in 1:length(cantidad)){
resultado <- resultado[i]
print(resultado)
}
for(i in 1:length(cantidad)){
resultado[i] <- i
print(resultado[i])
}
for(i in 1:length(cantidad)){
resultado <- i
print(resultado[i])
}
for(i in 1:length(cantidad)){
resultado <- [i]
for(i in 1:length(cantidad)){
resultado[i] <- i
]
for(i in 1:length(cantidad)){
resultado[i] <- [i]
for(i in 1:length(cantidad)){
print(i)
}
cantidad
bloxpot(rivers)
bloxspot(rivers)
boxplot(rivers)
cantidad <- stats$out;
while(cantidad != 0)
data<-rivers[rivers < superior & rivers > inferior]
stats <- boxplot.stats(rivers)
data <- rivers
while(cantidad > 0)
inferior <- stats$stats[1]
stats <- boxplot.stats(rivers)
data <- rivers
while(cantidad > 0)
inferior <- stats$stats[1]
cantidad <- stats$out;
while(cantidad > 0)
inferior <- stats$stats[1]
stats <- boxplot.stats(rivers)
data <- rivers
while(length(stats$out)>0)
inferior <- stats$stats[1]
variable <- boxplot.stats(rivers)
nuevo <- rivers
while(length(variable$out)>0)
inferior <- variable$stats[1]
variable <- boxplot.stats(rivers)
nuevo <- rivers
while(length(variable$out)>0)
inferior <- variable$stats[1]
variable <- boxplot.stats(rivers)
nuevo <- rivers
while(length(variable$out)>0)
inferior <- variable$stats[1]
variable <- boxplot.stats(rivers)
nuevo <- rivers
while(length(variable$out)>0)
inferior <- variable$stats[1]
setwd("C:\\Users\\CC7\\Downloads")
contaminacion <- read.csv("maraton_ny.csv")
maraton <- read.csv("maraton_ny.csv")
setwd("C:\\Users\\CC7\\Downloads")
maraton <- read.csv("maraton_ny.csv")
maraton
maraton$nivel <- cut(maraton4time, breaks=3,labels=c("alto","medio","bajo"))
maraton$nivel <- cut(maraton$time, breaks=3,labels=c("alto","medio","bajo"))
install.packages("scales")
library(rescale)
library("rescale")
library("scales")
maraton <- read.csv("data-conversion.csv")
data_conv <- read.csv("data-conversion.csv")
(data_conv$Age-min(data_conv$Age))/(max(data_conv$Age)-min(data_conv$Age))
rescale(data_conv$Age)
#REscalar con librearia
rescale(data_conv$Age)+
#Normalización
#La formula es (x-media)/std.dev.
setwd("C:\\Users\\CC7\\Downloads")
salary <- read.csv("salary.csv")
salary
scale(salary[,c(1,2)])
boxplot(salary)
plot(salary)
plot(scale(salary[,c(1,2)]))
plot(salary)
plot(scale(salary[,c(1,2)]))
grafica <- (scale(salary[,c(1,2)]))
plot(grafica[,2])
#smoothing
install.packages("modelbased")
library("modelbased")
x <- sin(seq(0, 4* pi, length.out = 100)) + rnorm(100,0,0.2)
plot(x, type = "l")
plot(x, type = "h") #COn la l nos lo pone en línea
plot(x, type = "l") #COn la l nos lo pone en líneal
#Lines permite agregar lineas a la gráfica con plot
#Añadir una linea que va a lisar los valores de x, smooth es una forma de hacer el suavizado
#
lines(smoothing(x,method = "smooth"), type = "l", col = "blue")
lines(smoothing(x,method = "loess"), type = "l", col = "red")
trabajo <- c(10,4,6,7,7,6,8,9,2,5,6,5,3,2,2,1,8,9,2,7)
examen <- c(9,5,6,7,8,7,6,9,1,5,7,6,2,1,5,5,9,10,4,6)
interes <- c(1,2,1,1,1,2,2,1,3,3,3,2,3,3,2,2,1,1,3,3)
tabla <- data.frame(trabajo,examen,interes)
tabla <- data.frame(trabajo,examen,interes)
nuevos <- data.frame(trabajo=c(2,9),examen=c(3,8))
library(class)
modelo <- knn(train = tabla[,-3],text=nuevos, cl = tabla$interes,k=3)
modelo <- knn(train = tabla[,-3],test=nuevos, cl = tabla$interes,k=3)
modelo1 <- knn(train = tabla[,-3], test=nuevos, cl = tabla$participacion, k=9)
modelo <- knn(train = tabla[,-3],test=nuevos, cl = tabla$interes,k=3) #[,-3] = 1:2 toma las primeras dos columnas
modelo1 <- knn(train = tabla[,-3], test=nuevos, cl = tabla$participacion, k=9)
modelo1 <- knn(train = tabla[,-3], test=nuevos, cl = tabla$interes, k=9)
modelo
modelo1
data(iris)
head(iris)
str(iris)
plot(iris)
install.packages("e1071")
plot(iris$Sepal.Length,iris$Sepal.Width,col=iris$Species)
plot(iris$Petal.Length,iris$Petal.Width,col=iris$Species)
S<-sample(150,100)
iris_train <-iris[-s,col]
iris_text <-iris[-s,col]
iris_train <-iris[-s,col]
iris_test <-iris[-s,col]
plot(iris$Sepal.Length,iris$Sepal.Width,col=iris$Species)
plot(iris$Petal.Length,iris$Petal.Width,col=iris$Species)
S<-sample(150,100)
svmfit <- svm(Species ~., data = iris_train,kernel = "linear",cost = .1,scale = F)
col<-c("Petal.Length","Petal.width","Species")
iris_train <-iris[-s,col]
iris_test <-iris[-s,col]
s<-sample(150,100)
iris_train <-iris[-s,col]
iris_test <-iris[-s,col]
s<-sample(150,100)
col<-c("Petal.Length","Petal.width","Species")
s
col
iris_train <-iris[s,col]
iris_test <-iris[-s,col]
iris_train <-iris[s,col]
iris_test <-iris[-s,col]
iris
iris_train
iris[s,col]
iris[s,col]
iris[s,col]
iris[s,col]
svmfit <- svm(Species ~., data = iris_train,kernel = "linear",cost = .1,scale = F)
library(e1071)
s<-sample(150,100)
col<-c("Petal.Length","Petal.width","Species")
iris_train <-iris[s,col]
iris_test <-iris[-s,col]
svmfit <- svm(Species ~., data = iris_train,kernel = "linear",cost = .1,scale = F)
col<-c("Petal.Length","Petal.Width","Species")
iris_train <-iris[s,col]
iris_test <-iris[-s,col]
svmfit <- svm(Species ~., data = iris_train,kernel = "linear",cost = .1,scale = F)
plot(svmfit,iris_train[,col])
titanac_df <- ptitanic
titanac_df <- Titanic
titanac_df
iristes <- iris
iristes
s1 <- sample(0,10.0)
s1 <- sample(0.0,10.0)
s1 <- sample(0.1,10.0)
s1 <- sample(10,30)
iristes
s<-sample(150,100)
s1 <- sample(10,30)
s1 <- sample(10.0,0.0)
s1
s1 <- sample_frac(10.0,0.0)
iristes
test
test
test
test
test
test <- data.frame(Ciela = c("Lluvioso"),Temperatura = c("Templado",Viento=))
test <- data.frame(Ciela = c("Lluvioso"),Temperatura = c("Templado"),Viento=c("Normal")
test
test <- data.frame(Cielo = c("Lluvioso"),Temperatura = c("Templado"),Viento = c("Normal"))
test
predicion <- predict(golf_model,test)
s1 <- sample(10,0);
s1
source("~/Serch/ACT1.R", echo=TRUE)
s
s1
iris
col <- c("Sepal.Length","Sepal.Width","Petal.Width","Species")
col <- c("Petal.Width","Petal.Length","Species")
s1 <- sample(160,100)
col <- c("Petal.Width","Petal.Length","Species")
s1 <- sample(160,100)
iris_train1 <- iris[s,col]
iris_test <- iris[-s,col]
svmfit1 <- svm(Species ~., data = iris_train1,kernel = "linear",cost = .1,scale = F)
iris_train1 <- iris[s,col]
iris_test <- iris[-s,col]
svmfit1 <- svm(Species ~., data = iris_train1,kernel = "linear",cost = .1,scale = F)
plot(svmfit1,iris_train[,col])
svmfit1 <- svm(Species ~., data = iris_train1,kernel = "linear",cost = .1,scale = F)
plot(svmfit1,iris_train[,col])
petalModel <- naiveBayes(Species~., data=iris)
iris_test1 <- iris[-s,col]
precictPetal <- predict(petalModel,iris_test1)
predictPetal <- predict(petalModel,iris_test1)
print(predictPetal)
petalModel <- naiveBayes(Species~., data=iris_train1)
predictPetal <- predict(petalModel,iris_test1)
print(predictPetal)
iris
testdata <- data.frame(Petal.Width = c(1.5,2.2),Petal.Length = c(0.2,1.4),Sepal.Length = c(3.2,2.8),Sepal.Width = c(2.5,1.3))
petalModel <- naiveBayes(Species~., data=iris)
plot(svmfit1,iris_train[,col])
petalModel <- naiveBayes(Species~., data=iris)
predictPetal <- predict(petalModel,testdata)
print(predictPetal)
testdata <- data.frame(Petal.Width = c(3.2,2.1),Petal.Length = c(0.9,1.8),Sepal.Length = c(4.2,3.8),Sepal.Width = c(2.5,1.9))
testdata <- data.frame(Petal.Width = c(3.2,2.1),Petal.Length = c(0.9,1.8),Sepal.Length = c(4.2,3.8),Sepal.Width = c(2.5,1.9))
petalModel <- naiveBayes(Species~., data=iris)
predictPetal <- predict(petalModel,testdata)
print(predictPetal)
setwd('C:\\Users\\CC7\\Downloads')
movies <- read.csv('movies.csv')
movies
install.packages('mice')
library('mice')
md.pattern(movies)
vacios <- movies[!complete.cases(movies),]
vacios
totalFaltantes <- nrow(vacios)
totalFaltantes
nrow(movies)
llenos <- movies[complete.cases(movies),]
llenos
nrow(llenos)
tLlenos <- nrow(llenos)
total <- totalFaltantes + tLlenos
total
vacios <- movies[!complete.cases(movies),]
totalFaltantes <- nrow(vacios)
totalFaltantes
print(paste("Los valores faltantes son: ", totalFaltantes))
vacios <- movies[!complete.cases(movies),]
totalFaltantes <- nrow(vacios)
print(paste("Los valores faltantes son: ", totalFaltantes))
sinFaltantes <- na.omit(movies)
nrow(sinFaltantes)
nuevo <- sinFaltantes
nuevo
sinFaltantes <- na.omit(movies)
nuevo <- sinFaltantes
nuevo
movies
movies$RATING
movies$RATING <-ifelse(is.na(movies$RATING), mean(movies$RATING, na.rm=TRUE),movies$RATING)
movies$RATING
install.packages('modeest')
library('mfv')
install.packages("modeest")
library("modeest")
library("modeest")
movies$VOTES
movies$VOTES <-ifelse(is.na(movies$VOTES), mfv(movies$VOTES, na_rm = TRUE), movies$VOTES)
movies$VOTES
movies$RunTime
library('DMwR')
data <- read.csv('post-data.csv')
data
boxplot(data)
plot(data)
os
contaminacion <- read.csv('contaminacion.csv')
plot(contaminacion)
boxplot(contaminacion)
data <- read.csv('post-data.csv')
plot(data)
boxplot(data)
data <- read.csv('post-data.csv')
boxplot(data$views)
boxplot(data$comments)
boxplot.stats(data)
boxplot.stats(data)$out
boxplot.stats(data$views)$out
typeof(data)
nrow(boxplot.stats(data$views)$out)
sum(boxplot.stats(data$views)$out)
movies$RunTime <- knnImputation(movies$RunTime)
data$category
cuantas <- factor(data$category)
cuantas
nlevels(cuantas)
library('dplyr')
View(data)
categoria[which.max(data$comments),4]
data[which.max(data$comments),4]
max(data$comments)
whic.max(data$comments)
which.max(data$comments)
which.max(data$comments,4)
which.max((data$comments),4)
data[which.max(data$comments),4]
data$category == 'Visualization'
View(data$category == 'Visualization')
sum(data$views)
boxplot.stats(data$views)
variable <- boxplot.stats(data$views)
variable
nuevoData <- data$views
nuevoData
cuantas <- factor(data$category)
nlevels(cuantas)
names(cuantas)
whie(length((variable$out) > 0){
whie(length(variable$out) > 0){
resultado <- (data %>% filter(data$category == 'Visualization')  %>%  count(data$comments))
resultado <- (data %>% filter(data$category == 'Visualization'))
resultado
summarise(sum(data$comments))
count(data$comments)
data$comments
summarize(sum(data$comments))
(sum(data$comments))
comentarios <-(sum(data$comments))
resultado <- (data %>% filter(data$category == 'Visualization')%>%(sum(data$comments)) )
resultado <- (data %>% filter(data$category == 'Visualization') %>%(sum(data$comments))
resultado
resultado <- (data %>% filter(data$category == 'Visualization') %>%(sum(data$comments)))
resultado <- (data %>% filter(data$category == 'Visualization'))
resultado
sum(data$comments, by(data$category == 'Visualization'))
resultado <- (data %>% filter(data$category == 'Visualization'))
resultado
sum(boxplot.stats(data$views)$out)
cuantas <- factor(data$category)
nlevels(cuantas)
data[which.max(data$comments),4]
sum(data$views)
resultado <- (data %>% filter(data$category == 'Visualization') %>% suma)
resultado <- (data %>% filter(data$category == 'Visualization') %>% suma(sum(data$views)))
resultado <- (data %>% filter(data$category == 'Visualization') %>% (sum(data$views)))
resultado <- (data %>% filter(data$category == 'Visualization') %>% sum(data$views))
resultado <- (data %>% filter(data$category == 'Visualization') %>% summary(data$views))
resultado
resultado <- (data %>% filter(data$category == 'Visualization') %>% summarise_all(data$views))
resultado
resultado <- (data %>% filter(data$category == 'Visualization') %>% summarise(data$views))
resultado
resultado <- (data %>% filter(data$category == 'Visualization') %>% summarise(data$views))
install.packages('DMwR')
library('DMwR')
install.packages('DMwR')
library('DMwR')
library('knn')
library('knnImputation')
library('DMwR2')
movies$RunTime <- knnImputation(movies$RunTime)
movies$RunTime
movies$RunTime <- knnImputation(movies$RunTime)
install.packages('DMwR2')
install.packages("DMwR2")
library('DMwR2')
movies$RunTime <- knnImputation(movies$RunTime)
movies$RunTime <- knnImputation(movies$RunTime)
while(length(variable$out) > 0){
inferior <- variable$stats[1]
superior <- variable$stats[5]
nuevoData <- data$views[data$views < superior & data$views > inferior]
variable <- boxplot.stats(nuevoData)
}
while(length(variable$out) > 0){
inferior <- variable$stats[1]
superior <- variable$stats[5]
nuevoData <- data$views[data$comments < superior & data$comments > inferior]
variable <- boxplot.stats(nuevoData)
}
boxplot(data$views)
boxplot(data$comments)
while(length(variable$out) > 0){
inferior <- variable$stats[1]
superior <- variable$stats[5]
nuevoData <- data$views[data$views < superior & data$views > inferior]
variable <- boxplot.stats(nuevoData)
}
data <- iris
head(iris
head(iris)
data <- iris
head(data)
muestra <- sample(150,100)
muestra
muestra <- sample(150,100)
head(muestra)
set.seed(56)
head(muestra)
head(muestra)
head(muestra)
train.Data <- data[muestra,-5]#pri
train.DataOutput <- data[muestra,5]
train.Data
train.DataOutput
test.Data <- data[-muestra,-5]#solo las primeras  4 columnas
test.Data.Output - data[-muestra,5]
test.Data.Output <- data[-muestra,5]
test.Data
test.Data.Output
library(class)
library(class)
test.output.knn <- knn(train = train.Data,test = test.Data,cl = train.DataOutput,k=3)
test.output.knn
mean(test.output.knn == test.Data.Output) ##media en el modelo
tt <- table(test.output.knn,test.Data.Output)
confusionMatrix(tt)
library(caret)
confusionMatrix(tt)
test.output.knn <- knn(train = train.Data,test = test.Data,cl = train.DataOutput,k=5)
test.output.knn
mean(test.output.knn == test.Data.Output) ##media en el modelo
tt <- table(test.output.knn,test.Data.Output) #crear la tra
confusionMatrix(tt)
test.output.knn <- knn(train = train.Data,test = test.Data,cl = train.DataOutput,k=32)
mean(test.output.knn == test.Data.Output) ##media en el modelo
tt <- table(test.output.knn,test.Data.Output) #crear la tra
confusionMatrix(tt)
k <- 1:50
resultado <- data.frame(k,precision = 0)
resultado
resultado <- data.frame(k,precision = 0)
for(n in k){
test.output.knn <- knn(train = train.Data,test = test.Data,cl = train.DataOutput,k=n)
resultado$precision[n] <- mean(test.output.knn == test.Data.Output)
}
resultado
print(ggplot() + aes(resultado$k,resultado$precision) + geom_line())
rm(list = ls())
library(caret)
data <- iris
head(data)
library(class)
muestra <- sample(150,100)
muestra <- sample(150,100)
train.Data <- data[muesta,]
muestra <- sample(150,100)
train.Data <- data[muestra,]
train.Data
test.Data <- data[-muestra,]
test.Data
knnEntrenamiento <- train(Species ~ ., data = train.Data,method = "knn", tuneLength = 30) #tunelength evalua 30 distintos valores
class(knnEntrenamiento)
knnEntrenamiento
class(knnEntrenamiento)
plot(knnEntrenamiento)
ctrl <- trainControl(method = "cv", number = 5)
ctrl <- trainControl(method = "cv", number = 5)
knnEntrenamiento.ctrl <- train(Species ~ ., data = train.Data,method = "knn", tuneLength = 30,trControl = ctrl)
knnEntrenamiento.ctrl
plot(knnEntrenamiento.ctrl)
knnEntrenamiento.prep <- train(Species ~ ., data = train.Data,method = "knn", tuneLength = 30,trControl = ctrl,preProcess = c("center","scale"))
knnEntrenamiento.prep
knnPredict <- predict(knnEntrenamiento.ctrl,newdata = testData)
knnPredict <- predict(knnEntrenamiento.ctrl,newdata = test.Data)
knnPredict
knnPredictProbabilidades <-predict(knnEntrenamiento.ctrl,newdata = test.Data, type = "prob")
head(knnPredictProbabilidades)
tail(knnPredictProbabilidades)
knnPredict <- predict(knnEntrenamiento.ctrl,newdata = test.Data)
confusionMatrix(knnPredict,test.Data$Species)
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
