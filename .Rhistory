d <- 1:5
d
e <- seq(1,5, by=1.5)
e
g <- scan()
g <- scan()
g <- scan()
names(vector) <- c("Posicion1" ,"Posicion2", "Posicion3")
vector <- c(1,2,3,4)
names(vector) <- c("Posicion1" ,"Posicion2", "Posicion3")
names
vector
inventario <- c('manzana'=30, 'perro'=3)
inventario
inventario2 <- c(inventario, 'pera'=10)
inventario2
vector1 <- 1:10;
colSum(vector1)
colsum(vector1)
sRow(vector1)
sum(vector1)
matriz <- matrix(1:6,nrow = 3,ncol=2);
nRow(matriz)
rowSums(matriz)
cbind(matriz,rowSums(matriz))
row(matriz)
prod(matriz)
rbind(matriz,prod(matriz))
matriz <- cbind(matriz,rowSums(matriz))
rbind(matriz,prod(matriz))
prod(matriz[,])
cbind(matriz,rowSums(matriz))
cbind(matriz,rowSums(matriz))
cbind(matriz,rowSums(matriz))
cbind(matriz,rowSums(matriz))
cbind(matriz,rowSums(matriz))
cbind(matriz,rowSums(matriz))
cbind(matriz,rowSums(matriz))
cbind(matriz,rowSums(matriz))
cbind(matriz,rowSums(matriz))
prod(row(matriz))
rm(list = ls())
matriz <- matrix(1:6,nrow = 3,ncol=2);
matriz
cbind(matriz,rowSums(matriz))
matriz[,1]
prodMatriz <- c(prod(matriz[,1]),prod(matriz[,2]),prod(matriz[,3]))
prod(matriz[,1])
prod(matriz[,2])
prod(matriz[,3])
prod(matriz[,0])
prod(matriz[,1])
mariz <- cbind(matriz,rowSums(matriz))
rm(list = ls())
matriz <- matrix(1:6,nrow = 3,ncol=2);
matriz
matriz <- cbind(matriz,rowSums(matriz))
matriz
prod(matriz[,3])
prodMatriz <- c(prod(matriz[,1]),prod(matriz[,2]),prod(matriz[,3]))
rbind(matriz,prodMatriz)
data <- data.frame(personas,edad)
personas <- c("Jorge","Brenda","Kelly","Sergio","Laura")
edad <- c(21,26,29,40,55)
data <- data.frame(personas,edad)
data
ciudad <- c("Cuernava","Yecapixtla","Tepoztlan","Cuentepec","Tequesquitengo")
data <- cbind(ciudad)
data
data <- data.frame(personas,edad)
data <- data.frame(data,ciudad)
data
data[data$edad>30]
subset(data,edad>30)
subset(data$personas,edad>30)
subset(data$personas,data$edad,edad>30)
subset(data[,2],edad>30)
subset(data[2,2],edad>30)
data
subset(data,edad>30)
alumno <- c("Andres", "Marcela", "Peter", "Ana", "Luis")
materia <- c("Matemáticas", "Historia", "Ciencias", "Inglés", "Geografía")
calificacion <- c(90, 85, 95, 80, 92)
grupo <- data.frame(alumno,materia,calificacion)
grupo
grupo.m90 <- subset(grupo,calificacion>90)
grupo.m90
grupo.m90 <- subset(grupo$alumno,calificacion>90)
grupo.m90
order(data,decreasing = T)
order(grupo$calificacion,decreasing = T)
order(grupo[grupo$calificacion],decreasing = T)
order(grupo$calificacion,decreasing = T)
grupo
order(grupo$calificacion,decreasing = T)
grupo$calificacion
grupo[order(grupo$calificacion,decreasing = T),]
data[data$edad>30]
data[,data$edad>30]
data[,]
filtro <- data$edad>30
subset(data,filtro)
sum(vector1)
vector1 <- 1:10;
sum(vector1)
matriz <- matrix(1:6,nrow = 3,ncol=2);
matriz <- cbind(matriz,rowSums(matriz))
prodMatriz <- c(prod(matriz[,1]),prod(matriz[,2]),prod(matriz[,3]))
rbind(matriz,prodMatriz)
personas <- c("Jorge","Brenda","Kelly","Sergio","Laura")
edad <- c(21,26,29,40,55)
data <- data.frame(personas,edad)
ciudad <- c("Cuernava","Yecapixtla","Tepoztlan","Cuentepec","Tequesquitengo")
data <- data.frame(data,ciudad)
filtro <- data$edad>30
subset(data,filtro)
alumno <- c("Andres", "Marcela", "Peter", "Ana", "Luis")
materia <- c("Matemáticas", "Historia", "Ciencias", "Inglés", "Geografía")
calificacion <- c(90, 85, 95, 80, 92)
grupo <- data.frame(alumno,materia,calificacion)
grupo.m90 <- subset(grupo$alumno,calificacion>90)
grupo.m90
grupo[order(grupo$calificacion,decreasing = T),]
inventario <- c("Manzana", "Pera", "Naranja")
iventario[-3]
inventario[-3]
inventario[-(2:3)]
inventario[-('manzana')]
inventario['manzana']
inventario['Manzana']
inventario <- inventario[-3
inventario
inventario <- c("Manzana", "Pera", "Naranja")
inventario <- inventario[-3]
inventario
inventario
inventario
inventario <- c("Manzana" =10, "Pera"=20, "Naranja"=30)
inventario[ inventario < 25]
inventario[ inventario == 10
inventario[ inventario == 10]
inventario <- c("Manzana" =10, "Pera"=20, "Naranja"=30)
inventario[ inventario == 10]
inventario[1:2]
inventario[ inventario %in% c(10,20,25)]
inventario[ inventario %in% 2:30]
setwd("C:\\Users\\CC7\\Downloads")
maraton <- read.csv("maraton_ny.csv",
header = TRUE,#Nombre de las columnas
row.names = 1, #Las filas tienen un nombre
sep = ",",
dec = ".")
view(maraton)
View(maraton)
maraton$age
maraton$gender
maraton[3,4]
maraton[1:10,1:2]
maraton[ , c(1,5)]
maraton[c(1,100), ]
View(maraton[maraton$gender=='Fermale',])
View(maraton[maraton$gender=='Female',])
max(maraton$age)
max(maraton$age)
max(maraton$time)
mean(maraton$age)
min(maraton$age)
dim(maraton)
# 10 primeras filas, 2 primeras columnas
maraton[1:10,1:2]
nrow(maraton)
dim(maraton)
dimension <- dim(maraton)
typeof(dimension)
str(dimension)
dim(maraton)[1]
?rank
?wich.max
wich.max(maraton$age)
which.max(maraton$age)
setwd("C:\\Users\\CC7\\Downloads")
maraton <- read.csv("house_rental.xlsx",
header = TRUE,#Nombre de las columnas
row.names = 0, #Las filas tienen un nombre
sep = ",",
dec = ".")
setwd("C:\\Users\\CC7\\Downloads")
maraton <- read.csv("house_rental.csv",
header = TRUE,#Nombre de las columnas
row.names = 0, #Las filas tienen un nombre
sep = ",",
dec = ".")
View(maraton)
maraton <- read.csv("house_rental.xlsx",
header = TRUE,#Nombre de las columnas
row.names = 0, #Las filas tienen un nombre
sep = ",",
dec = ".")
casas <- read.csv("house_rental.csv",
header = TRUE,#Nombre de las columnas
row.names = 0, #Las filas tienen un nombre
sep = ",",
dec = ".")
setwd("C:\\Users\\CC7\\Downloads")
casas <- read.csv("house_rental.csv",
header = TRUE,#Nombre de las columnas
row.names = 0, #Las filas tienen un nombre
sep = ",",
dec = ".")
casas <- read.csv("house_rental.csv",
header = TRUE,#Nombre de las columnas
sep = ",",
dec = ".")
View(casas)
View(casas)
View(casas[casas$Price == c(60000,80000) ,])
View(casas[casas$Price == c(60000,80000) ,5])
sum(casas[casas$Price == c(60000,80000) ,5])
sum(rental[rental$Price>=60000 & rental$Price <=80000,5])
#o junto
dim(maraton)[1]
sum(casas[casas$Price>=60000 & casas$Price <=80000,5])
install.packages("dplyr")
library(dplyr)
setwd("C:\\Users\CC7\\Documents\\Serch")
setwd("C:\\Users\\CC7\\Documents\\Serch")
maraton <- read.csv("maraton_ny.csv",
header = TRUE,#Nombre de las columnas
sep = ",",
dec = ".")
maraton
class(maraton)
dim(maraton)
names(maraton)
str(maraton)
glimpse(maraton)
summary(maraton)
head(maraton)
head(maraton,4)
head(maraton,900)
head(maraton,10)
tail(maraton,10)
contaminacion <- read.csv("contaminacion.csv")
is.na(contaminacion)
complete.cases(contaminacion)
na.omit(contaminacion)
cotaminacion
contaminacion
contaminacion[is.na(contaminacion)]
filtro <- (is.na(contaminacion))
sd(contaminacion)
is.na(contaminacion) #falta dato es
subset(contaminacion,subset = is.na(contaminacion)=TRUE)
subset(contaminacion,is.na(contaminacion) = TRUE)
subset(contaminacion,subset = is.na(contaminacion))
complete.cases(contaminacion)
subset(contaminacion,subset = is.na(contaminacion))
contaminacion[is.na(contaminacion) = TRUE]
contaminacion[,is.na(contaminacion) = TRUE]
subset(contaminacion, is.na(contaminacion)[,TRUE])
contaminacion[is.na(contaminacion)[,TRUE]]
contaminacion[is.na(contaminacion)[,TRUE],]
contaminacion[complete.cases(contaminacion),]
contaminacion[!complete.cases(contaminacion),]
is.na(contaminacion)
filtro <- is.na(contaminacion)
contaminacion[filtro = TRUE,]
filtro <- is.na(contaminacion)
contaminacion[filtro = TRUE,]
filtro
complete.cases(contaminacion)
filtro <- is.na(contaminacion)
filtro
contaminacion[filtro[,TRUE] ,]
contaminacion[filtro[,] ,]
contaminacion[!complete.cases(contaminacion),]
install.packages("mice")
library(mice)
md.pattern(maraton)
md.pattern(contaminacion)
is.na(contaminacion)
filtro
contaminacion[filtro[,T] ,]
md.pattern(contaminacion)
duplicated(maraton)
duplicated(contaminacion)
contaminacion[!duplicated(contaminacion),]
contaminacion[duplicated(contaminacion),]
setwd("C:\\Users\\CC7\\Downloads")
contaminacion <- read.csv("contaminacion.csv",
header = TRUE,#Nombre de las columnas
row.names = 1, #Las filas tienen un nombre
sep = ",",
dec = ".")
setwd("C:\\Users\\CC7\\Downloads")
contaminacion <- read.csv("contaminacion.csv",
header = TRUE,#Nombre de las columnas
row.names = 1, #Las filas tienen un nombre
sep = ",",
dec = ".")
contaminacion <- read.csv("contaminacion.csv")
View(contaminacion)
is.na(contaminacion)
complete.cases(contaminacion)
na.omit(is.na(contaminacion))
complete.cases(is.na(contaminacion))
complete.cases(na.omit(contaminacion))
complete.cases(na.omit(is.na(contaminacion)))
view(is.na(contaminacion))
View(is.na(contaminacion))
contaminacion(contaminacion == na.omit(contaminacion))
))
contaminacion[!complete.cases(coontaminacion)]
contaminacion[!complete.cases(coontaminacion),]
contaminacion[!complete.cases(contaminacion),]
install.pacgakes(mice)
install.packages(mice)
install.packages(mice)
install.packages(mices)
install.packages("mice")
library(contaminacion)
library(mice)
maraton <- read.csv("maraton_ny.csv")
md.pattern(maraton)
md.pattern(contaminacion)
duplicated(contamiancion)
duplicated(contaminacion)
contamincacion[!duplicated(contaminacion),]
contaminacion[!duplicated(contaminacion),]
contaminacion[duplicated(contaminacion),]
contaminacion[!duplicated(contaminacion),]
contaminacion[duplicated(contaminacion),]
sum
sum(contaminacion$CN, na.rm = TRUE)
contaminacion$CN_p <- ifelse(is.na(contaminacion$CN),
mean(contaminacion$CN, na.rm = TRUE).
contaminacion$CN_p <- ifelse(is.na(contaminacion$CN),
mean(contaminacion$CN, na.rm = TRUE),
contaminacion$CN)
contaminacion$CN_p
contaminacion
contaminacion
install.packages("modeest")
library("modeest")
mfv(contaminacion)
b -< data,frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios")))
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$b2, na_rm=TRUE), b$v2)
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$v2, na_rm=TRUE), b$v2)
b -< data,frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios")))
b <- data,frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios")))
b <- data.frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios")))
b <- data.frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios")))
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$v2, na_rm=TRUE), b$v2)
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$v2, na_rm=TRUE), b$v2)
b
b <- data.frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios")))
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$v2, na_rm=TRUE), b$v2)
#Promedio cuando haya datos numericos y moda con text
b <- data.frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios"))
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$v2, na_rm=TRUE), b$v2)
b <- data.frame(v1 = c("a","b","c","d"), v2 = c("hola","hola",NA,"adios"))
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$v2, na_rm=TRUE), b$v2)
b
install.packages("DMwR")
install.packages("DMwR")
install.packages("DMwR2")
setwd("C:\\Users\\CC7\\Downloads")
contaminacion <- read.csv("contaminacion.csv")
contaminacion
)
kncontamincacion <- knnImputation(contaminacion)
library("DMwR2")
kcontamincacion <- knnImputation(contaminacion)
kcontamincacion
kcontamincacion
?Rivers
??Rivers
rivers
#Es para ver en gráficas
plot(rivres)
#Es para ver en gráficas
plot(rivers)
boxplot(rivers)
boxplot(rivers,horizontal = TRUE)
#Debemos de saber el valores los bigotes antes de eliminar los atípicos
boxplots.stats(rivers)
#Debemos de saber el valores los bigotes antes de eliminar los atípicos
boxplot.stats(rivers)
$stats <- boxplot.stats(rivers)
$stats <- boxplot.stats(rivers)
stats <- boxplot.stats(rivers$stats)
stats <- boxplot.stats(rivers)
bigote1 <- stats[1]
bigote2 <-stats [5]
bigote1
bigote2
bigote1 <- stats$stats[1]
bigote2 <- stats$stats[5]
bigote1
bigote2
inferior <- stats$stats[1]
superior <- stats$stats[5]
rivers[rivers < superior & rivers > inferior]
boxplot(data)
data<-rivers[rivers < superior & rivers > inferior]
boxplot(data)
stats <- boxplot.stats(rivers)
stats
cantidad <- stats$out;
for(i in 1:length(cantidad)){
resultado <- resultado[i]
print(resultado)
}
for(i in 1:length(cantidad)){
resultado[i] <- i
print(resultado[i])
}
for(i in 1:length(cantidad)){
resultado <- i
print(resultado[i])
}
for(i in 1:length(cantidad)){
resultado <- [i]
for(i in 1:length(cantidad)){
resultado[i] <- i
]
for(i in 1:length(cantidad)){
resultado[i] <- [i]
for(i in 1:length(cantidad)){
print(i)
}
cantidad
bloxpot(rivers)
bloxspot(rivers)
boxplot(rivers)
cantidad <- stats$out;
while(cantidad != 0)
data<-rivers[rivers < superior & rivers > inferior]
stats <- boxplot.stats(rivers)
data <- rivers
while(cantidad > 0)
inferior <- stats$stats[1]
stats <- boxplot.stats(rivers)
data <- rivers
while(cantidad > 0)
inferior <- stats$stats[1]
cantidad <- stats$out;
while(cantidad > 0)
inferior <- stats$stats[1]
stats <- boxplot.stats(rivers)
data <- rivers
while(length(stats$out)>0)
inferior <- stats$stats[1]
variable <- boxplot.stats(rivers)
nuevo <- rivers
while(length(variable$out)>0)
inferior <- variable$stats[1]
variable <- boxplot.stats(rivers)
nuevo <- rivers
while(length(variable$out)>0)
inferior <- variable$stats[1]
variable <- boxplot.stats(rivers)
nuevo <- rivers
while(length(variable$out)>0)
inferior <- variable$stats[1]
variable <- boxplot.stats(rivers)
nuevo <- rivers
while(length(variable$out)>0)
inferior <- variable$stats[1]
setwd("C:\\Users\\CC7\\Downloads")
contaminacion <- read.csv("maraton_ny.csv")
maraton <- read.csv("maraton_ny.csv")
setwd("C:\\Users\\CC7\\Downloads")
maraton <- read.csv("maraton_ny.csv")
maraton
maraton$nivel <- cut(maraton4time, breaks=3,labels=c("alto","medio","bajo"))
maraton$nivel <- cut(maraton$time, breaks=3,labels=c("alto","medio","bajo"))
install.packages("scales")
library(rescale)
library("rescale")
library("scales")
maraton <- read.csv("data-conversion.csv")
data_conv <- read.csv("data-conversion.csv")
(data_conv$Age-min(data_conv$Age))/(max(data_conv$Age)-min(data_conv$Age))
rescale(data_conv$Age)
#REscalar con librearia
rescale(data_conv$Age)+
#Normalización
#La formula es (x-media)/std.dev.
setwd("C:\\Users\\CC7\\Downloads")
salary <- read.csv("salary.csv")
salary
scale(salary[,c(1,2)])
boxplot(salary)
plot(salary)
plot(scale(salary[,c(1,2)]))
plot(salary)
plot(scale(salary[,c(1,2)]))
grafica <- (scale(salary[,c(1,2)]))
plot(grafica[,2])
#smoothing
install.packages("modelbased")
library("modelbased")
x <- sin(seq(0, 4* pi, length.out = 100)) + rnorm(100,0,0.2)
plot(x, type = "l")
plot(x, type = "h") #COn la l nos lo pone en línea
plot(x, type = "l") #COn la l nos lo pone en líneal
#Lines permite agregar lineas a la gráfica con plot
#Añadir una linea que va a lisar los valores de x, smooth es una forma de hacer el suavizado
#
lines(smoothing(x,method = "smooth"), type = "l", col = "blue")
lines(smoothing(x,method = "loess"), type = "l", col = "red")
