inventario[ inventario == 10]
inventario <- c("Manzana" =10, "Pera"=20, "Naranja"=30)
inventario[ inventario == 10]
inventario[1:2]
inventario[ inventario %in% c(10,20,25)]
inventario[ inventario %in% 2:30]
setwd("C:\\Users\\CC7\\Downloads")
maraton <- read.csv("maraton_ny.csv",
header = TRUE,#Nombre de las columnas
row.names = 1, #Las filas tienen un nombre
sep = ",",
dec = ".")
view(maraton)
View(maraton)
maraton$age
maraton$gender
maraton[3,4]
maraton[1:10,1:2]
maraton[ , c(1,5)]
maraton[c(1,100), ]
View(maraton[maraton$gender=='Fermale',])
View(maraton[maraton$gender=='Female',])
max(maraton$age)
max(maraton$age)
max(maraton$time)
mean(maraton$age)
min(maraton$age)
dim(maraton)
# 10 primeras filas, 2 primeras columnas
maraton[1:10,1:2]
nrow(maraton)
dim(maraton)
dimension <- dim(maraton)
typeof(dimension)
str(dimension)
dim(maraton)[1]
?rank
?wich.max
wich.max(maraton$age)
which.max(maraton$age)
setwd("C:\\Users\\CC7\\Downloads")
maraton <- read.csv("house_rental.xlsx",
header = TRUE,#Nombre de las columnas
row.names = 0, #Las filas tienen un nombre
sep = ",",
dec = ".")
setwd("C:\\Users\\CC7\\Downloads")
maraton <- read.csv("house_rental.csv",
header = TRUE,#Nombre de las columnas
row.names = 0, #Las filas tienen un nombre
sep = ",",
dec = ".")
View(maraton)
maraton <- read.csv("house_rental.xlsx",
header = TRUE,#Nombre de las columnas
row.names = 0, #Las filas tienen un nombre
sep = ",",
dec = ".")
casas <- read.csv("house_rental.csv",
header = TRUE,#Nombre de las columnas
row.names = 0, #Las filas tienen un nombre
sep = ",",
dec = ".")
setwd("C:\\Users\\CC7\\Downloads")
casas <- read.csv("house_rental.csv",
header = TRUE,#Nombre de las columnas
row.names = 0, #Las filas tienen un nombre
sep = ",",
dec = ".")
casas <- read.csv("house_rental.csv",
header = TRUE,#Nombre de las columnas
sep = ",",
dec = ".")
View(casas)
View(casas)
View(casas[casas$Price == c(60000,80000) ,])
View(casas[casas$Price == c(60000,80000) ,5])
sum(casas[casas$Price == c(60000,80000) ,5])
sum(rental[rental$Price>=60000 & rental$Price <=80000,5])
#o junto
dim(maraton)[1]
sum(casas[casas$Price>=60000 & casas$Price <=80000,5])
install.packages("dplyr")
library(dplyr)
setwd("C:\\Users\CC7\\Documents\\Serch")
setwd("C:\\Users\\CC7\\Documents\\Serch")
maraton <- read.csv("maraton_ny.csv",
header = TRUE,#Nombre de las columnas
sep = ",",
dec = ".")
maraton
class(maraton)
dim(maraton)
names(maraton)
str(maraton)
glimpse(maraton)
summary(maraton)
head(maraton)
head(maraton,4)
head(maraton,900)
head(maraton,10)
tail(maraton,10)
contaminacion <- read.csv("contaminacion.csv")
is.na(contaminacion)
complete.cases(contaminacion)
na.omit(contaminacion)
cotaminacion
contaminacion
contaminacion[is.na(contaminacion)]
filtro <- (is.na(contaminacion))
sd(contaminacion)
is.na(contaminacion) #falta dato es
subset(contaminacion,subset = is.na(contaminacion)=TRUE)
subset(contaminacion,is.na(contaminacion) = TRUE)
subset(contaminacion,subset = is.na(contaminacion))
complete.cases(contaminacion)
subset(contaminacion,subset = is.na(contaminacion))
contaminacion[is.na(contaminacion) = TRUE]
contaminacion[,is.na(contaminacion) = TRUE]
subset(contaminacion, is.na(contaminacion)[,TRUE])
contaminacion[is.na(contaminacion)[,TRUE]]
contaminacion[is.na(contaminacion)[,TRUE],]
contaminacion[complete.cases(contaminacion),]
contaminacion[!complete.cases(contaminacion),]
is.na(contaminacion)
filtro <- is.na(contaminacion)
contaminacion[filtro = TRUE,]
filtro <- is.na(contaminacion)
contaminacion[filtro = TRUE,]
filtro
complete.cases(contaminacion)
filtro <- is.na(contaminacion)
filtro
contaminacion[filtro[,TRUE] ,]
contaminacion[filtro[,] ,]
contaminacion[!complete.cases(contaminacion),]
install.packages("mice")
library(mice)
md.pattern(maraton)
md.pattern(contaminacion)
is.na(contaminacion)
filtro
contaminacion[filtro[,T] ,]
md.pattern(contaminacion)
duplicated(maraton)
duplicated(contaminacion)
contaminacion[!duplicated(contaminacion),]
contaminacion[duplicated(contaminacion),]
setwd("C:\\Users\\CC7\\Downloads")
contaminacion <- read.csv("contaminacion.csv",
header = TRUE,#Nombre de las columnas
row.names = 1, #Las filas tienen un nombre
sep = ",",
dec = ".")
setwd("C:\\Users\\CC7\\Downloads")
contaminacion <- read.csv("contaminacion.csv",
header = TRUE,#Nombre de las columnas
row.names = 1, #Las filas tienen un nombre
sep = ",",
dec = ".")
contaminacion <- read.csv("contaminacion.csv")
View(contaminacion)
is.na(contaminacion)
complete.cases(contaminacion)
na.omit(is.na(contaminacion))
complete.cases(is.na(contaminacion))
complete.cases(na.omit(contaminacion))
complete.cases(na.omit(is.na(contaminacion)))
view(is.na(contaminacion))
View(is.na(contaminacion))
contaminacion(contaminacion == na.omit(contaminacion))
))
contaminacion[!complete.cases(coontaminacion)]
contaminacion[!complete.cases(coontaminacion),]
contaminacion[!complete.cases(contaminacion),]
install.pacgakes(mice)
install.packages(mice)
install.packages(mice)
install.packages(mices)
install.packages("mice")
library(contaminacion)
library(mice)
maraton <- read.csv("maraton_ny.csv")
md.pattern(maraton)
md.pattern(contaminacion)
duplicated(contamiancion)
duplicated(contaminacion)
contamincacion[!duplicated(contaminacion),]
contaminacion[!duplicated(contaminacion),]
contaminacion[duplicated(contaminacion),]
contaminacion[!duplicated(contaminacion),]
contaminacion[duplicated(contaminacion),]
sum
sum(contaminacion$CN, na.rm = TRUE)
contaminacion$CN_p <- ifelse(is.na(contaminacion$CN),
mean(contaminacion$CN, na.rm = TRUE).
contaminacion$CN_p <- ifelse(is.na(contaminacion$CN),
mean(contaminacion$CN, na.rm = TRUE),
contaminacion$CN)
contaminacion$CN_p
contaminacion
contaminacion
install.packages("modeest")
library("modeest")
mfv(contaminacion)
b -< data,frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios")))
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$b2, na_rm=TRUE), b$v2)
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$v2, na_rm=TRUE), b$v2)
b -< data,frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios")))
b <- data,frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios")))
b <- data.frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios")))
b <- data.frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios")))
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$v2, na_rm=TRUE), b$v2)
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$v2, na_rm=TRUE), b$v2)
b
b <- data.frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios")))
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$v2, na_rm=TRUE), b$v2)
#Promedio cuando haya datos numericos y moda con text
b <- data.frame(v1 = c("a","b","c","d", v2 = c("hola","hola",NA,"adios"))
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$v2, na_rm=TRUE), b$v2)
b <- data.frame(v1 = c("a","b","c","d"), v2 = c("hola","hola",NA,"adios"))
b$v2_moda <- ifelse(is.na(b$v2), mfv(b$v2, na_rm=TRUE), b$v2)
b
install.packages("DMwR")
install.packages("DMwR")
install.packages("DMwR2")
setwd("C:\\Users\\CC7\\Downloads")
contaminacion <- read.csv("contaminacion.csv")
contaminacion
)
kncontamincacion <- knnImputation(contaminacion)
library("DMwR2")
kcontamincacion <- knnImputation(contaminacion)
kcontamincacion
kcontamincacion
?Rivers
??Rivers
rivers
#Es para ver en gráficas
plot(rivres)
#Es para ver en gráficas
plot(rivers)
boxplot(rivers)
boxplot(rivers,horizontal = TRUE)
#Debemos de saber el valores los bigotes antes de eliminar los atípicos
boxplots.stats(rivers)
#Debemos de saber el valores los bigotes antes de eliminar los atípicos
boxplot.stats(rivers)
$stats <- boxplot.stats(rivers)
$stats <- boxplot.stats(rivers)
stats <- boxplot.stats(rivers$stats)
stats <- boxplot.stats(rivers)
bigote1 <- stats[1]
bigote2 <-stats [5]
bigote1
bigote2
bigote1 <- stats$stats[1]
bigote2 <- stats$stats[5]
bigote1
bigote2
inferior <- stats$stats[1]
superior <- stats$stats[5]
rivers[rivers < superior & rivers > inferior]
boxplot(data)
data<-rivers[rivers < superior & rivers > inferior]
boxplot(data)
stats <- boxplot.stats(rivers)
stats
cantidad <- stats$out;
for(i in 1:length(cantidad)){
resultado <- resultado[i]
print(resultado)
}
for(i in 1:length(cantidad)){
resultado[i] <- i
print(resultado[i])
}
for(i in 1:length(cantidad)){
resultado <- i
print(resultado[i])
}
for(i in 1:length(cantidad)){
resultado <- [i]
for(i in 1:length(cantidad)){
resultado[i] <- i
]
for(i in 1:length(cantidad)){
resultado[i] <- [i]
for(i in 1:length(cantidad)){
print(i)
}
cantidad
bloxpot(rivers)
bloxspot(rivers)
boxplot(rivers)
cantidad <- stats$out;
while(cantidad != 0)
data<-rivers[rivers < superior & rivers > inferior]
stats <- boxplot.stats(rivers)
data <- rivers
while(cantidad > 0)
inferior <- stats$stats[1]
stats <- boxplot.stats(rivers)
data <- rivers
while(cantidad > 0)
inferior <- stats$stats[1]
cantidad <- stats$out;
while(cantidad > 0)
inferior <- stats$stats[1]
stats <- boxplot.stats(rivers)
data <- rivers
while(length(stats$out)>0)
inferior <- stats$stats[1]
variable <- boxplot.stats(rivers)
nuevo <- rivers
while(length(variable$out)>0)
inferior <- variable$stats[1]
variable <- boxplot.stats(rivers)
nuevo <- rivers
while(length(variable$out)>0)
inferior <- variable$stats[1]
variable <- boxplot.stats(rivers)
nuevo <- rivers
while(length(variable$out)>0)
inferior <- variable$stats[1]
variable <- boxplot.stats(rivers)
nuevo <- rivers
while(length(variable$out)>0)
inferior <- variable$stats[1]
setwd("C:\\Users\\CC7\\Downloads")
contaminacion <- read.csv("maraton_ny.csv")
maraton <- read.csv("maraton_ny.csv")
setwd("C:\\Users\\CC7\\Downloads")
maraton <- read.csv("maraton_ny.csv")
maraton
maraton$nivel <- cut(maraton4time, breaks=3,labels=c("alto","medio","bajo"))
maraton$nivel <- cut(maraton$time, breaks=3,labels=c("alto","medio","bajo"))
install.packages("scales")
library(rescale)
library("rescale")
library("scales")
maraton <- read.csv("data-conversion.csv")
data_conv <- read.csv("data-conversion.csv")
(data_conv$Age-min(data_conv$Age))/(max(data_conv$Age)-min(data_conv$Age))
rescale(data_conv$Age)
#REscalar con librearia
rescale(data_conv$Age)+
#Normalización
#La formula es (x-media)/std.dev.
setwd("C:\\Users\\CC7\\Downloads")
salary <- read.csv("salary.csv")
salary
scale(salary[,c(1,2)])
boxplot(salary)
plot(salary)
plot(scale(salary[,c(1,2)]))
plot(salary)
plot(scale(salary[,c(1,2)]))
grafica <- (scale(salary[,c(1,2)]))
plot(grafica[,2])
#smoothing
install.packages("modelbased")
library("modelbased")
x <- sin(seq(0, 4* pi, length.out = 100)) + rnorm(100,0,0.2)
plot(x, type = "l")
plot(x, type = "h") #COn la l nos lo pone en línea
plot(x, type = "l") #COn la l nos lo pone en líneal
#Lines permite agregar lineas a la gráfica con plot
#Añadir una linea que va a lisar los valores de x, smooth es una forma de hacer el suavizado
#
lines(smoothing(x,method = "smooth"), type = "l", col = "blue")
lines(smoothing(x,method = "loess"), type = "l", col = "red")
setwd("c:\\User\\erick\\Download")
setwd("C:\\Users\\erick\\Download")
setwd("C:\\Users\\erick\\Downloads")
setwd("C:\\Users\\erick\\Downloads")
movies <- read.csv("movies.csv")
setwd("C:\\Users\\erick\\Downloads")
movies <- read.csv("movies.csv")
#Verifica si existen valores faltantes.
is.na(movies)
movies <- read.csv("movies.csv",
header=TRUE,
sep=",",
dec=".")
movies
movies$VOTES <- ifelse(movies$VOTES=="", #Busca los valores vacíos
NA, #Los remplaza con NA
movies$VOTES) #Llena la columna de Votes
View(movies)
movies$Gross <- ifelse(movies$Gross=="",
NA,
movies$Gross)
View(movies)
#Verifica si existen valores faltantes.
install.packages("mice")
library("mice")
md.pattern(movies)
str(md.pattern(movies))
md.pattern(movies)
md.pattern(movies)
str(md.pattern(movies)) #Para conocer las dimensiones
#¿Cuántos valores faltantes existen en el dataframe?
md.pattern(movies)[6,7]
#Guardar en un nuevo dataframe las observaciones que no tiene datos faltantes.
na.omit(movies)
#Guardar en un nuevo dataframe las observaciones que no tiene datos faltantes.
moviesSinFaltantes <- na.omit(movies)
View(moviesSinFaltantes)
movies$RATING <- ifelse(is.na(movies$RATING),
mean(movies$RATING, na.rm = TRUE),
movies$RATING)
movies$RATING <- ifelse(is.na(movies$RATING),
mean(movies$RATING, na.rm = TRUE),
movies$RATING)
movies <- read.csv("movies.csv",
header=TRUE,
sep=",",
dec=".")
#Carga los datos del archivo en un data frame.
setwd("C:\\Users\\erick\\Downloads")
movies <- read.csv("movies.csv",
header=TRUE,
sep=",",
dec=".")
#Carga los datos del archivo en un data frame.
setwd("C:\\Users\\erick\\Downloads")
movies <- read.csv("movies.csv",
header=TRUE,
sep=",",
dec=".")
movies$VOTES <- ifelse(movies$VOTES=="", #Busca los valores vacíos
NA, #Los remplaza con NA
movies$VOTES) #Llena la columna de Votes
movies$Gross <- ifelse(movies$Gross=="",
NA,
movies$Gross)
md.pattern(movies)[6,7]
library("mice")
#¿Cuántos valores faltantes existen en el dataframe?
md.pattern(movies)[6,7] #6 y 7 por que son las dimesiones que nos da con str(md.pattern(movies))
moviesSinFaltantes <- na.omit(movies)
View(moviesSinFaltantes)
movies$RATING <- ifelse(is.na(movies$RATING),
mean(movies$RATING, na.rm = TRUE),
movies$RATING)
install.packages("modeest")
library("modeest")
movies$VOTES <- ifelse(is.na(movies$VOTES),
mfv(movies$VOTES, na_rm = TRUE),
movies$VOTES)
View(movies)
#Sustituir valores faltantes de la columna runtime con la técnica de vecinos cercanos.
install.packages("DMwR2")
library("DMwR2")
library("DMwR2")
movies <- knnImputation(movies)
post_data <- read.csv("post-data.csv",
header=TRUE,
sep=",",
dec=".")
boxplot(post_data$views)
boxplot(post_data$comments)
#De acuerdo con las estadísticas de las gráficas de caja, ¿cuántos valores atípicos tiene cada columna?
boxplot.stats(post_data$views)
#De acuerdo con las estadísticas de las gráficas de caja, ¿cuántos valores atípicos tiene cada columna?
boxplot.stats(post_data$views)$out
#De acuerdo con las estadísticas de las gráficas de caja, ¿cuántos valores atípicos tiene cada columna?
length(boxplot.stats(post_data$views)$out)
length(boxplot.stats(post_data$comments)$out)
quitarAtipicos <- function(vector){
variable <- boxplot.stats(vector)
nuevo <- vector
while(length(variable$out) > 0){
inferior <- variable$stats[1]
superior <- variable$stats[5]
nuevo <- vector[vector < superior & vector > inferior]
variable <- boxplot.stats(nuevo)
}
return(nuevo)
}
boxplot(post_data$views)
boxplot(post_data$views)
viewSinAtipicos <- quitarAtipicos(post_data$views)
boxplot(viewSinAtipicos)
boxplot(commentsSinAtipicos)
boxplot(post_data$comments)
commentsSinAtipicos <- quitarAtipicos(post_data$comments)
boxplot(commentsSinAtipicos)
boxplot(commentsSinAtipicos)
boxplot(viewSinAtipicos)#recibimos en viewSinAtipicos los valores limpios sin atipicos
#¿Cuántas y cuáles categorías existen en el dataset?
tipos <- factor(post_data$category)
nlevels(tipos)
nrow(tipos)
#¿Cuántas y cuáles categorías existen en el dataset?
tipos <- factor(post_data$category)#Nos da los tipos
tipos
post_data
#¿Cuál es la categoría con mayor cantidad de comentarios?
post_data[which.max(post_data$comments),5]
#¿Cuál es la categoría con mayor cantidad de comentarios?
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
resumen <- post_data %>%
group_by(category) %>%
summarize(total_comments = sum(comments))
resumen[which.max(resumen$total_comments),1]
post_data %>% filter(category=="Visualization") %>% summarize(mean(views))
mean(postData$views[postData$category == "Visualization"],)
mean(post_data$views[post_data$category == "Visualization"],)
